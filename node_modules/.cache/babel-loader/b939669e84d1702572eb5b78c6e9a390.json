{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jakub/programming/fullstack_project/second_project/src/components/LoginPage.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport { Box, Center // FormControl,\n, FormLabel, Button, Input } from '@chakra-ui/react';\nexport const loginContext = /*#__PURE__*/React.createContext();\n\nconst LoginPage = () => {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(true); // Change to false after testing\n\n  const [isButtonClicked, setIsButtonClicked] = useState(true);\n  console.log(isLoggedIn, 'loginpage');\n\n  const validate = values => {\n    const errors = {};\n\n    if (!values.login) {\n      errors.login = 'Required';\n    } else if (values.login !== localStorage.getItem('login')) {\n      errors.login = 'Invalid login';\n    }\n\n    if (!values.password) {\n      errors.password = 'Required';\n    } else if (values.password !== localStorage.getItem('password')) {\n      errors.password = 'Invalid password';\n    }\n\n    return errors;\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      login: '',\n      password: ''\n    },\n    validate,\n    onSubmit: values => {\n      console.log(values, null, 2);\n    }\n  });\n\n  if (isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/main\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this) // Make protected routes for users\n    ;\n  } else {\n    return /*#__PURE__*/_jsxDEV(Center, {\n      mt: \"10%\",\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: formik.handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            htmlFor: \"login\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            id: \"login\",\n            name: \"login\",\n            type: \"text\",\n            onChange: formik.handleChange,\n            onBlur: formik.handleBlur,\n            value: formik.values.login,\n            mb: \"2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(FormLabel, {\n            htmlFor: \"password\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            id: \"password\",\n            name: \"password\",\n            type: \"password\",\n            onChange: formik.handleChange,\n            onBlur: formik.handleBlur,\n            value: formik.values.password\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(loginContext.Provider, {\n            value: isLoggedIn,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              colorScheme: \"teal\",\n              variant: \"ghost\",\n              onClick: () => formik.values.login === localStorage.getItem('login') && formik.values.password === localStorage.getItem('password') ? setIsLoggedIn(true) : setIsButtonClicked(false),\n              mt: \"1\",\n              mb: \"2\",\n              children: \"Login\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 8\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 7\n          }, this), !isButtonClicked ? /*#__PURE__*/_jsxDEV(Box, {\n            style: {\n              color: 'red'\n            },\n            children: \"Invalid login or password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 27\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }, this);\n  }\n};\n\n_s(LoginPage, \"Cp0JsK3iUBg7IEPAYSlDG3oxQuo=\", false, function () {\n  return [useFormik];\n});\n\n_c = LoginPage;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/home/jakub/programming/fullstack_project/second_project/src/components/LoginPage.js"],"names":["React","useState","Redirect","useFormik","Box","Center","FormLabel","Button","Input","loginContext","createContext","LoginPage","isLoggedIn","setIsLoggedIn","isButtonClicked","setIsButtonClicked","console","log","validate","values","errors","login","localStorage","getItem","password","formik","initialValues","onSubmit","handleSubmit","handleChange","handleBlur","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport {\n\tBox,\n\tCenter,\n\t// FormControl,\n\tFormLabel,\n\tButton,\n\tInput,\n} from '@chakra-ui/react';\n\nexport const loginContext = React.createContext();\n\nconst LoginPage = () => {\n\n\tconst [isLoggedIn, setIsLoggedIn] = useState(true); // Change to false after testing\n\tconst [isButtonClicked, setIsButtonClicked] = useState(true);\n\n\tconsole.log(isLoggedIn, 'loginpage')\n\n\tconst validate = values => {\n\t\tconst errors = {};\n\n\t\tif (!values.login) {\n\t\t\terrors.login = 'Required';\n\t\t} else if (values.login !== localStorage.getItem('login')) {\n\t\t\terrors.login = 'Invalid login';\n\t\t}\n\n\t\tif (!values.password) {\n\t\t\terrors.password = 'Required';\n\t\t} else if (values.password !== localStorage.getItem('password')) {\n\t\t\terrors.password = 'Invalid password';\n\t\t}\n\n\t\treturn errors;\n\t}\n\n\tconst formik = useFormik({\n\t\tinitialValues : {\n\t\t\tlogin: '',\n\t\t\tpassword: ''\n\t\t},\n\t\tvalidate,\n\t\tonSubmit: values => {\n\t\t\tconsole.log(values, null, 2)\n\t\t},\n\t});\n\n\tif (isLoggedIn) {\n\t\treturn (\n\t\t\t<Redirect to='/main' /> // Make protected routes for users\n\t\t)\n\t} else {\n\t\treturn (\n\t\t\t<Center mt='10%'>\n\t\t\t\t<Box>\n\t\t\t\t\t<form onSubmit={formik.handleSubmit}>\n\t\t\t\t\t\t<FormLabel htmlFor='login'>Login</FormLabel>\n\t\t\t\t\t\t{/* {formik.touched.login && formik.errors.login ? <Box>{formik.errors.login}</Box> : null} */}\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\tid='login'\n\t\t\t\t\t\t\tname='login'\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\tonBlur={formik.handleBlur}\n\t\t\t\t\t\t\tvalue={formik.values.login}\n\t\t\t\t\t\t\tmb='2'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FormLabel htmlFor='password'>Password</FormLabel>\n\t\t\t\t\t\t{/* {formik.touched.password && formik.errors.password ? <Box>{formik.errors.password}</Box> : null} */}\n\t\t\t\t\t\t<Input \n\t\t\t\t\t\t\tid='password'\n\t\t\t\t\t\t\tname='password'\n\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\tonChange={formik.handleChange}\n\t\t\t\t\t\t\tonBlur={formik.handleBlur}\n\t\t\t\t\t\t\tvalue={formik.values.password}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<loginContext.Provider value={isLoggedIn}>\n\t\t\t\t\t\t\t<Button \n\t\t\t\t\t\t\t\tcolorScheme='teal' \n\t\t\t\t\t\t\t\tvariant='ghost' \n\t\t\t\t\t\t\t\tonClick={() => formik.values.login === localStorage.getItem('login') && formik.values.password === localStorage.getItem('password') ? setIsLoggedIn(true) : setIsButtonClicked(false)}\n\t\t\t\t\t\t\t\tmt='1'\n\t\t\t\t\t\t\t\tmb='2'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tLogin\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</loginContext.Provider>\n\t\t\t\t\t\t{!isButtonClicked ? <Box style={{color: 'red'}}>Invalid login or password</Box> : null}\n\t\t\t\t\t</form>\n\t\t\t\t</Box>\n\t\t\t</Center>\n\t\t)\n\t}\n}\n\nexport default LoginPage;"]},"metadata":{},"sourceType":"module"}